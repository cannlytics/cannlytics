rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Secure admin documents.
    match /admin/{document=**} {
      allow read, write: if false;
    }
    
    // Allow user's to read their own API key information.
    match /admin/api/api_key_hmacs/{code} {
      allow read: if request.auth != null && request.auth.uid == resource.data.uid;
      allow write: if false;
    }
    
    // Allow anyone to read the standard data models.
    match /public/state/data_models/{document=**} {
    	allow read: if true;
      allow write: if false;
    }
    
    // Allow anyone to read public variables.
    match /public/data/variables/{document=**} {
    	allow read: if true;
      allow write: if false;
    }
    
    // Allow anyone to read the subscription plan data.
    match /public/subscriptions/subscription_plans/{document=**} {
    	allow read: if true;
      allow write: if false;
    }

    // Allow anyone to subscribe.
    // TODO: Make more restrictive
    // e.g. (request.resource.data.keys().hasOnly(
    // ['name', 'location', 'city', 'address', 'hours', 'cuisine']))
    match /public/subscribers/{document=**} {
    	allow read: if false;
      allow write: if true;
    }
    
    // Allow anyone to read the public video data.
    match /public/videos/video_data/{document=**} {
    	allow read: if true;
      allow write: if false;
    }
    
    // Allow anyone to read the public data sets.
    match /public/data/state_data/{document=**} {
    	allow read: if true;
      allow write: if false;
    }
    
    // Allow users to manage data in their organization.
    // Only owners can delete an organization.
    match /organizations/{organizationId} {
      allow read, create, update:
          if request.auth.token.team == organizationId;
      allow delete:
          if request.auth.token.qa == organizationId
          || request.auth.token.owner == organizationId;
    }
    
    // Allow users to manage data in their organization.
    // Only owners and quality assurance can delete.
    match /organizations/{organizationId}/{document=**} {
      allow read, create, update:
          if request.auth.token.team == organizationId;
      allow delete:
          if request.auth.token.qa == organizationId
          || request.auth.token.owner == organizationId;
    }
    match /organizations/{organizationId}/data_models/{document=**} {
      allow read, create, update:
          if request.auth.token.team == organizationId;
      allow delete:
          if request.auth.token.qa == organizationId
          || request.auth.token.owner == organizationId;
    }
    
    // Allow organization members to read the daily totals.
    match /organizations/{organizationId}/stats/organization_settings/daily_totals/{date=**} {
    	allow read:
      	if request.auth.token.team == organizationId;
    }
    
    // Allow organization members to read and create data.
    // Only owners and quality assurance can change or delete data.
    match /organizations/{organizationId}/{dataModel}/{modelId=**} {
    	allow read, create, update:
          if request.auth.token.team == organizationId;
      allow delete:
          if request.auth.token.owner == organizationId;
    }
    
    // Allow organization members to read and create file data.
    // Only owners and quality assurance can change or delete file data.
    match /organizations/{organizationId}/{dataModel}/{modelId}/files/{file=**} {
    	allow read, create:
          if request.auth.token.team == organizationId;
      allow delete, update:
          if request.auth.token.qa == organizationId
          || request.auth.token.owner == organizationId;
    }
    
    // Allow user's to read and write their own records.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow user's to read and write their own signature.
    match /users/{userId}/user_settings/signature {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }


    // === Data ===

    // Allow anyone to read the public licenses data.
    match /data/licenses/{state}/{document=**} {
    	allow read: if true;
      allow write: if false;
    }

    // Allow anyone to read the public lab results data.
    match /data/lab_results/{state}/{document=**} {
    	allow read: if true;
      allow write: if false;
    }

    // Allow anyone to read the public lab results data.
    match /public/data/lab_results/{document=**} {
    	allow read: if true;
      allow write: if false;
    }

    // Allow anyone to read the public strain data.
    match /public/data/strains/{document=**} {
    	allow read: if true;
      allow write: if false;
    }

    // Allow anyone to read the public patents data.
    match /public/data/patents/{document=**} {
    	allow read: if true;
      allow write: if false;
    }

    // Allow anyone to write, but not read, data logs.
    // TODO: Make write more restrictive.
    match /logs/data/coas/{document=**} {
    	allow read: if false;
      allow write: if true;
    }

    // === User Data ===

    // Allow users to read and write their own receipts.
    match /users/{userId}/receipts/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to read and write their own COAs.
    match /users/{userId}/coas/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to read and write their own lab results.
    match /users/{userId}/lab_results/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // === Recipes ===

    // Allow anyone to read public AI data.
    match /public/ai/{collection}/{document=**} {
    	allow read: if true;
      allow write: if false;
    }

    // Allow user's to read and write their own recipes.
    match /users/{userId}/recipes/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // TODO: Allow users to read the details of their team members.

    // === Subscriptions ===
    
    function hasStandardSubscription() {
      return request.auth.token.subscription == "standard";
    }

    function hasProSubscription() {
      return request.auth.token.subscription == "pro";
    }

    function hasEnterpriseSubscription() {
      return request.auth.token.subscription == "enterprise";
    }

    // Allow user's to read their own subscription plan.
    match /subscribers/{userId} {
    	allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false;
    }

    // Extra (common patterns / objects)
    // ----------------------------------
    // request.auth.uid
    // request.auth.token.admin
    // request.auth.token.email_verified
    // request.resource.data.message.size()
    // request.resource.data.title is string
    // get(/databases/$(database)/documents/users/$(request.auth.uid)).data.support
    // request.time < timestamp.date(2020, 7, 10)
    // request.query.limit <= 10

  }
}
